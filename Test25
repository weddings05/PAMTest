static int select_mfa_factor(pam_handle_t* pamh, struct MFAFactors* factors) {
    const struct pam_conv* conv;
    struct pam_message msg;
    const struct pam_message* msg_ptr[1];
    struct pam_response* resp = NULL;

    int ret = pam_get_item(pamh, PAM_CONV, (const void**)&conv);
    if (ret != PAM_SUCCESS) {
        debug_log("Failed to get PAM conversation: %d", ret);
        return -1;
    }

    if (conv == NULL || conv->conv == NULL) {
        debug_log("PAM conversation is null");
        return -1;
    }

    // Create the complete prompt with explicit newlines
    char options_prompt[MAX_LINE * 4] = "";
    
    // Add header with explicit newlines
    snprintf(options_prompt, sizeof(options_prompt), "Select MFA method:%s%s", "\n", "\n");
    
    // Add each factor option on a new line
    for (int i = 0; i < factors->count; i++) {
        char option_line[MAX_LINE];
        snprintf(option_line, sizeof(option_line), 
                "  %d) %s via %s%s", 
                i + 1, 
                factors->factors[i].type, 
                factors->factors[i].provider,
                "\n");  // Explicit newline after each factor
        strcat(options_prompt, option_line);
    }
    
    // Add empty line and choice prompt
    strcat(options_prompt, "\n");  // Empty line before choice
    
    char choice_prompt[32];
    snprintf(choice_prompt, sizeof(choice_prompt), 
             "Choice [1-%d]: ", factors->count);
    strcat(options_prompt, choice_prompt);

    debug_log("Complete MFA prompt:\n%s", options_prompt);

    // Set up the message
    msg.msg_style = PAM_PROMPT_ECHO_ON;
    msg.msg = options_prompt;
    msg_ptr[0] = &msg;

    // Get user selection
    ret = conv->conv(1, msg_ptr, &resp, conv->appdata_ptr);
    if (ret != PAM_SUCCESS) {
        debug_log("Conversation failed: %d", ret);
        return -1;
    }

    if (resp == NULL || resp[0].resp == NULL) {
        debug_log("No response received");
        if (resp) free(resp);
        return -1;
    }

    // Process selection
    int selection = atoi(resp[0].resp) - 1;
    
    // Clean up
    memset(resp[0].resp, 0, strlen(resp[0].resp));
    free(resp[0].resp);
    free(resp);

    // Validate selection
    if (selection < 0 || selection >= factors->count) {
        debug_log("Invalid selection: %d", selection);
        return -1;
    }

    debug_log("Selected factor %d: %s via %s", 
              selection + 1,
              factors->factors[selection].type,
              factors->factors[selection].provider);

    return selection;
}
