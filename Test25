static int select_mfa_factor(pam_handle_t* pamh, struct MFAFactors* factors) {
    const struct pam_conv* conv;
    struct pam_message msg;
    const struct pam_message* msg_ptr[1];
    struct pam_response* resp = NULL;

    int ret = pam_get_item(pamh, PAM_CONV, (const void**)&conv);
    if (ret != PAM_SUCCESS) {
        debug_log("Failed to get PAM conversation: %d", ret);
        return -1;
    }

    if (conv == NULL || conv->conv == NULL) {
        debug_log("PAM conversation is null");
        return -1;
    }

    // Define ASCII control characters
    const char NL = 10;    // Line Feed
    const char CR = 13;    // Carriage Return
    
    // Create the prompt with ASCII control codes
    char options_prompt[MAX_LINE * 4] = "";
    int offset = 0;

    // Build header with control codes for left alignment and line breaks
    offset += snprintf(options_prompt + offset, sizeof(options_prompt) - offset,
                      "%cSelect MFA method:%c%c%c%c",
                      CR, CR, NL, CR, NL);

    // Add each factor option with proper formatting
    for (int i = 0; i < factors->count; i++) {
        offset += snprintf(options_prompt + offset, sizeof(options_prompt) - offset,
                          "  %d) %s via %s%c%c",
                          i + 1,
                          factors->factors[i].type,
                          factors->factors[i].provider,
                          CR, NL);
    }

    // Add empty line and choice prompt
    offset += snprintf(options_prompt + offset, sizeof(options_prompt) - offset,
                      "%c%cChoice [1-%d]: ",
                      CR, NL, factors->count);

    debug_log("Complete MFA prompt with control codes:");
    for (size_t i = 0; i < strlen(options_prompt); i++) {
        if (options_prompt[i] == CR) {
            debug_log("Position %zu: CR", i);
        } else if (options_prompt[i] == NL) {
            debug_log("Position %zu: NL", i);
        } else {
            debug_log("Position %zu: '%c'", i, options_prompt[i]);
        }
    }

    // Set up the message
    msg.msg_style = PAM_PROMPT_ECHO_ON;
    msg.msg = options_prompt;
    msg_ptr[0] = &msg;

    // Get user selection
    ret = conv->conv(1, msg_ptr, &resp, conv->appdata_ptr);
    if (ret != PAM_SUCCESS) {
        debug_log("Conversation failed: %d", ret);
        return -1;
    }

    if (resp == NULL || resp[0].resp == NULL) {
        debug_log("No response received");
        if (resp) free(resp);
        return -1;
    }

    // Process selection
    int selection = atoi(resp[0].resp) - 1;
    
    // Clean up
    memset(resp[0].resp, 0, strlen(resp[0].resp));
    free(resp[0].resp);
    free(resp);

    // Validate selection
    if (selection < 0 || selection >= factors->count) {
        debug_log("Invalid selection: %d", selection);
        return -1;
    }

    debug_log("Selected factor %d: %s via %s", 
              selection + 1,
              factors->factors[selection].type,
              factors->factors[selection].provider);

    return selection;
}
