PAM_EXTERN int pam_sm_authenticate(pam_handle_t* pamh, int flags, int argc, const char** argv) {
    debug_log("Starting PAM Okta authentication module");

    // Check if previous authentication was successful
    const void *authtok = NULL;
    const char *user = NULL;
    int ret;

    // First check if user exists from previous auth
    ret = pam_get_item(pamh, PAM_USER, (const void**)&user);
    debug_log("PAM_USER check result: %d, user: %s", ret, user ? user : "null");
    
    // Check authentication token
    ret = pam_get_item(pamh, PAM_AUTHTOK, &authtok);
    debug_log("PAM_AUTHTOK check result: %d, authtok: %s", ret, authtok ? "exists" : "null");

    // Get PAM flags
    debug_log("PAM Flags: %d", flags);

    // If we can't get user or auth token, previous auth likely failed
    if (ret != PAM_SUCCESS || authtok == NULL || user == NULL) {
        debug_log("Previous authentication appears to have failed");
        debug_log("ret: %d, authtok: %s, user: %s", 
                  ret, 
                  authtok ? "exists" : "null",
                  user ? "exists" : "null");
        return PAM_AUTH_ERR;
    }

    // Check authentication status
    struct pam_conv *conv;
    ret = pam_get_item(pamh, PAM_CONV, (const void **)&conv);
    if (ret != PAM_SUCCESS || conv == NULL) {
        debug_log("Failed to get PAM conversation");
        return PAM_AUTH_ERR;
    }

    // Get service name
    const char *service = NULL;
    ret = pam_get_item(pamh, PAM_SERVICE, (const void**)&service);
    debug_log("Service check - ret: %d, service: %s", ret, service ? service : "null");
    
    if (ret != PAM_SUCCESS || service == NULL) {
        debug_log("Failed to get service name");
        return PAM_AUTH_ERR;
    }

    debug_log("Previous authentication checks completed. Proceeding with Okta authentication");

    // Your existing Okta authentication code continues here...
    char* okta_username = NULL;
    char* okta_password = NULL;
    struct OktaConfig config;

    // Rest of your code...
}
