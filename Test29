PAM_EXTERN int pam_sm_authenticate(pam_handle_t* pamh, int flags, int argc, const char** argv) {
    debug_log("Starting PAM Okta authentication module");

    // Check previous authentication status
    const void *authtok = NULL;
    const char *user = NULL;
    int ret;

    // First check if user exists from previous auth
    ret = pam_get_item(pamh, PAM_USER, (const void**)&user);
    debug_log("PAM_USER check result: %d, user: %s", ret, user ? user : "null");

    // Try to get the authentication token
    ret = pam_get_item(pamh, PAM_AUTHTOK, &authtok);
    debug_log("Initial PAM_AUTHTOK check result: %d, authtok: %s", 
              ret, authtok ? "exists" : "null");

    if (authtok == NULL) {
        // Try to get the previous auth token
        const char *old_authtok = NULL;
        ret = pam_get_item(pamh, PAM_OLDAUTHTOK, (const void**)&old_authtok);
        debug_log("PAM_OLDAUTHTOK check result: %d, old_authtok: %s", 
                  ret, old_authtok ? "exists" : "null");

        if (old_authtok) {
            // Set it as current auth token
            ret = pam_set_item(pamh, PAM_AUTHTOK, old_authtok);
            debug_log("Setting PAM_AUTHTOK from OLDAUTHTOK: %d", ret);
        }
    }

    // Recheck auth token
    ret = pam_get_item(pamh, PAM_AUTHTOK, &authtok);
    debug_log("Final PAM_AUTHTOK check result: %d, authtok: %s", 
              ret, authtok ? "exists" : "null");

    // Get authentication status from pam_sepermit.so
    char *sepermit_status = NULL;
    ret = pam_get_data(pamh, "pam_sepermit_status", (const void**)&sepermit_status);
    debug_log("pam_sepermit_status check result: %d, status: %s", 
              ret, sepermit_status ? sepermit_status : "null");

    // Check if we should proceed
    if (ret != PAM_SUCCESS || authtok == NULL || user == NULL) {
        debug_log("Previous authentication appears to have failed");
        debug_log("ret: %d, authtok: %s, user: %s", 
                  ret, 
                  authtok ? "exists" : "null",
                  user ? "exists" : "null");
        return PAM_AUTH_ERR;
    }

    debug_log("Previous authentication checks completed. Proceeding with Okta authentication");

    // Your existing Okta authentication code continues here...
    char* okta_username = NULL;
    char* okta_password = NULL;
    struct OktaConfig config;

    // Rest of your code...
}
