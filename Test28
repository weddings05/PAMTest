PAM_EXTERN int pam_sm_authenticate(pam_handle_t* pamh, int flags, int argc, const char** argv) {
    debug_log("Starting PAM Okta authentication module");

    // Check previous module status
    const char *service;
    int ret = pam_get_item(pamh, PAM_SERVICE, (const void**)&service);
    if (ret != PAM_SUCCESS) {
        debug_log("Failed to get PAM service");
        return PAM_AUTH_ERR;
    }
    debug_log("PAM Service: %s", service);

    // Get PAM authentication status
    const void *auth_status = NULL;
    ret = pam_get_data(pamh, "auth_status", &auth_status);
    if (ret == PAM_SUCCESS && auth_status != NULL) {
        int status = *(const int*)auth_status;
        debug_log("Previous auth status: %d", status);
        if (status != PAM_SUCCESS) {
            debug_log("Previous authentication failed, skipping Okta");
            return PAM_AUTH_ERR;
        }
    } else {
        debug_log("Could not get previous auth status, ret: %d", ret);
    }

    // Additional check for authentication status
    const void *authtok = NULL;
    ret = pam_get_item(pamh, PAM_AUTHTOK, &authtok);
    debug_log("PAM_AUTHTOK check result: %d", ret);
    if (ret != PAM_SUCCESS) {
        debug_log("Previous authentication appears to have failed");
        return PAM_AUTH_ERR;
    }

    // Get authentication flags
    debug_log("PAM Flags: %d", flags);
    if (flags & PAM_SILENT) {
        debug_log("PAM_SILENT flag is set");
    }
    if (flags & PAM_DISALLOW_NULL_AUTHTOK) {
        debug_log("PAM_DISALLOW_NULL_AUTHTOK flag is set");
    }

    debug_log("Previous authentication checks passed, proceeding with Okta authentication");

    // Rest of your existing Okta authentication code...
}
