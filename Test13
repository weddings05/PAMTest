// Add this new structure after your existing ones
struct UserMapping {
    char linux_user[MAX_LINE];
    char okta_user[MAX_LINE];
};

// Add this function to read the mapping file
static char* get_okta_username(const char* linux_username) {
    FILE* fp;
    char line[MAX_LINE];
    static char okta_username[MAX_LINE];
    const char* mapping_file = "/etc/exceed/user-mapping.txt";
    
    debug_log("Reading user mapping for Linux user: %s", linux_username);
    
    fp = fopen(mapping_file, "r");
    if (!fp) {
        debug_log("Cannot open mapping file: %s", strerror(errno));
        return NULL;
    }

    while (fgets(line, sizeof(line), fp)) {
        // Skip comments and empty lines
        if (line[0] == '#' || line[0] == '\n') continue;
        
        // Remove trailing newline
        line[strcspn(line, "\n")] = 0;
        
        char* linux_user = strtok(line, "=");
        char* okta_user = strtok(NULL, "\n");
        
        if (linux_user && okta_user) {
            // Trim whitespace
            while (*linux_user == ' ') linux_user++;
            while (*okta_user == ' ') okta_user++;
            
            if (strcmp(linux_user, linux_username) == 0) {
                debug_log("Found mapping: Linux user %s -> Okta user %s", 
                         linux_user, okta_user);
                strncpy(okta_username, okta_user, MAX_LINE - 1);
                fclose(fp);
                return okta_username;
            }
        }
    }

    debug_log("No mapping found for Linux user: %s", linux_username);
    fclose(fp);
    return NULL;
}

// Modify your prompt_user function to only handle password
static int prompt_user(pam_handle_t* pamh, char** password) {
    const struct pam_conv* conv;
    struct pam_message msg;
    const struct pam_message* msg_ptr[1];
    struct pam_response* resp = NULL;

    int ret = pam_get_item(pamh, PAM_CONV, (const void**)&conv);
    if (ret != PAM_SUCCESS) {
        debug_log("Failed to get PAM conversation: %d", ret);
        return ret;
    }

    if (conv == NULL || conv->conv == NULL) {
        debug_log("PAM conversation is null");
        return PAM_SYSTEM_ERR;
    }

    // Only prompt for password
    msg.msg_style = PAM_PROMPT_ECHO_OFF;
    msg.msg = "Okta password: ";
    msg_ptr[0] = &msg;

    ret = conv->conv(1, msg_ptr, &resp, conv->appdata_ptr);
    if (ret != PAM_SUCCESS) {
        debug_log("Conversation failed: %d", ret);
        return ret;
    }

    if (resp == NULL || resp[0].resp == NULL) {
        debug_log("No response received");
        if (resp) free(resp);
        return PAM_CONV_ERR;
    }

    *password = strdup(resp[0].resp);
    
    memset(resp[0].resp, 0, strlen(resp[0].resp));
    free(resp[0].resp);
    free(resp);

    return PAM_SUCCESS;
}

// Update your pam_sm_authenticate function
PAM_EXTERN int pam_sm_authenticate(pam_handle_t* pamh, int flags, int argc, const char** argv) {
    debug_log("Starting PAM Okta authentication module");

    // Get Linux username from PAM
    const char* linux_username = NULL;
    int ret = pam_get_item(pamh, PAM_USER, (const void**)&linux_username);
    if (ret != PAM_SUCCESS || !linux_username) {
        debug_log("Failed to get Linux username");
        return PAM_AUTH_ERR;
    }

    // Get mapped Okta username
    char* okta_username = get_okta_username(linux_username);
    if (!okta_username) {
        debug_log("No Okta username mapping found for %s", linux_username);
        return PAM_AUTH_ERR;
    }

    debug_log("Using Okta username: %s for Linux user: %s", 
              okta_username, linux_username);

    // Get Okta password
    char* okta_password = NULL;
    ret = prompt_user(pamh, &okta_password);
    if (ret != PAM_SUCCESS || !okta_password) {
        debug_log("Failed to get Okta password");
        return PAM_AUTH_ERR;
    }

    // Read configuration and authenticate
    struct OktaConfig config;
    if (read_config(&config) != 0) {
        debug_log("Failed to read Okta configuration");
        if (okta_password) {
            memset(okta_password, 0, strlen(okta_password));
            free(okta_password);
        }
        return PAM_AUTH_ERR;
    }

    // Authenticate with Okta
    ret = authenticate_with_okta(pamh, okta_username, okta_password, &config);

    // Clean up
    if (okta_password) {
        memset(okta_password, 0, strlen(okta_password));
        free(okta_password);
    }

    if (ret != PAM_SUCCESS) {
        debug_log("Authentication failed");
        return PAM_AUTH_ERR;
    }

    debug_log("Authentication completed successfully");
    return PAM_SUCCESS;
}
```

Create a mapping file at `/etc/exceed/user-mapping.txt`:
```
# Linux username = Okta username
linuxuser1 = okta.user1@company.com
linuxuser2 = okta.user2@company.com
