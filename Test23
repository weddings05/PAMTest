static int select_mfa_factor(pam_handle_t* pamh, struct MFAFactors* factors) {
    char final_prompt[MAX_LINE * 6];
    char* response = NULL;
    
    // Using explicit ASCII line feed (10) and carriage return (13)
    const char newline[] = {13, 10, 0};  // \r\n in ASCII
    
    // Start fresh with an empty buffer
    memset(final_prompt, 0, sizeof(final_prompt));
    
    // Build the prompt with explicit newlines
    strcat(final_prompt, "Select MFA method:");
    strcat(final_prompt, newline);    // First newline
    strcat(final_prompt, newline);    // Empty line
    
    // Add each factor with explicit newlines
    for (int i = 0; i < factors->count; i++) {
        char factor_line[MAX_LINE];
        snprintf(factor_line, sizeof(factor_line), 
                "%d) %s via %s", 
                i + 1, 
                factors->factors[i].type, 
                factors->factors[i].provider);
        strcat(final_prompt, factor_line);
        strcat(final_prompt, newline);  // Add newline after each factor
    }
    
    // Add selection prompt
    strcat(final_prompt, newline);    // Empty line
    char selection_prompt[64];
    snprintf(selection_prompt, sizeof(selection_prompt), 
             "Enter selection (1-%d): ", factors->count);
    strcat(final_prompt, selection_prompt);
    
    debug_log("MFA Prompt constructed (showing bytes):");
    for (size_t i = 0; i < strlen(final_prompt); i++) {
        debug_log("Byte %zu: %d", i, (unsigned char)final_prompt[i]);
    }
    
    // Create PAM conversation
    const struct pam_conv* conv;
    struct pam_message msg;
    const struct pam_message* msg_ptr[1];
    struct pam_response* resp = NULL;

    int ret = pam_get_item(pamh, PAM_CONV, (const void**)&conv);
    if (ret != PAM_SUCCESS) {
        debug_log("Failed to get PAM conversation: %d", ret);
        return -1;
    }

    if (conv == NULL || conv->conv == NULL) {
        debug_log("PAM conversation is null");
        return -1;
    }

    // Try with PAM text info first to display header
    struct pam_message info_msg;
    info_msg.msg_style = PAM_TEXT_INFO;
    info_msg.msg = "Select MFA method:\n";
    const struct pam_message* info_ptr[1];
    info_ptr[0] = &info_msg;
    
    // Display header
    conv->conv(1, info_ptr, &resp, conv->appdata_ptr);
    if (resp) {
        if (resp[0].resp) free(resp[0].resp);
        free(resp);
        resp = NULL;
    }

    // Now build the actual selection prompt
    char options_prompt[MAX_LINE * 4] = "";
    for (int i = 0; i < factors->count; i++) {
        char option_line[MAX_LINE];
        snprintf(option_line, sizeof(option_line), 
                "\n%d) %s via %s", 
                i + 1, 
                factors->factors[i].type, 
                factors->factors[i].provider);
        strcat(options_prompt, option_line);
    }
    strcat(options_prompt, "\n\nChoice: ");

    // Set up the selection message
    msg.msg_style = PAM_PROMPT_ECHO_ON;
    msg.msg = options_prompt;
    msg_ptr[0] = &msg;

    // Get user selection
    ret = conv->conv(1, msg_ptr, &resp, conv->appdata_ptr);
    if (ret != PAM_SUCCESS) {
        debug_log("Conversation failed: %d", ret);
        return -1;
    }

    if (resp == NULL || resp[0].resp == NULL) {
        debug_log("No response received");
        if (resp) free(resp);
        return -1;
    }

    // Process selection
    int selection = atoi(resp[0].resp) - 1;
    
    // Clean up
    memset(resp[0].resp, 0, strlen(resp[0].resp));
    free(resp[0].resp);
    free(resp);

    // Validate selection
    if (selection < 0 || selection >= factors->count) {
        debug_log("Invalid selection: %d", selection);
        return -1;
    }

    debug_log("Selected factor %d: %s via %s", 
              selection + 1,
              factors->factors[selection].type,
              factors->factors[selection].provider);

    return selection;
}
