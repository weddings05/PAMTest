The issue is with the JSON payload formatting. Let's fix the CURL request by properly escaping special characters and formatting the JSON. Here's the updated `authenticate_with_okta` function:

```c
static int authenticate_with_okta(const char* username, const char* password) {
    if (!username || !password) {
        file_debug_log("%s: Username or password is NULL", LOG_PREFIX);
        return 0;
    }

    CURL *curl;
    CURLcode res;
    struct curl_response resp = {0};
    int auth_success = 0;
    long http_code = 0;

    file_debug_log("%s: Starting Okta authentication for user: %s", LOG_PREFIX, username);

    // Calculate required size for escaped strings
    CURL *escape_curl = curl_easy_init();
    if (!escape_curl) {
        file_debug_log("%s: Failed to initialize CURL for escaping", LOG_PREFIX);
        return 0;
    }

    char *escaped_username = curl_easy_escape(escape_curl, username, 0);
    char *escaped_password = curl_easy_escape(escape_curl, password, 0);
    
    if (!escaped_username || !escaped_password) {
        file_debug_log("%s: Failed to escape username or password", LOG_PREFIX);
        curl_easy_cleanup(escape_curl);
        return 0;
    }

    // Create JSON payload with escaped values
    char *payload;
    size_t payload_size = strlen(escaped_username) + strlen(escaped_password) + 100;
    payload = malloc(payload_size);
    if (!payload) {
        file_debug_log("%s: Memory allocation failed for payload", LOG_PREFIX);
        curl_free(escaped_username);
        curl_free(escaped_password);
        curl_easy_cleanup(escape_curl);
        return 0;
    }

    // Format JSON payload correctly
    snprintf(payload, payload_size, 
             "{"
             "\"username\":\"%s\","
             "\"password\":\"%s\","
             "\"options\":{"
             "\"multiOptionalFactorEnroll\":false,"
             "\"warnBeforePasswordExpired\":true"
             "}"
             "}",
             escaped_username, escaped_password);

    curl_free(escaped_username);
    curl_free(escaped_password);
    curl_easy_cleanup(escape_curl);

    file_debug_log("%s: Initializing CURL with payload: %s", LOG_PREFIX, payload);
    curl = curl_easy_init();
    if (curl) {
        struct curl_slist *headers = NULL;
        headers = curl_slist_append(headers, "Accept: application/json");
        headers = curl_slist_append(headers, "Content-Type: application/json");
        headers = curl_slist_append(headers, "User-Agent: OktaPAM/1.0");

        file_debug_log("%s: Setting CURL options with URL: %s", LOG_PREFIX, config.api_url);
        
        curl_easy_setopt(curl, CURLOPT_URL, config.api_url);
        curl_easy_setopt(curl, CURLOPT_POST, 1L);
        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, payload);
        curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, strlen(payload));
        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void *)&resp);
        curl_easy_setopt(curl, CURLOPT_TIMEOUT, 30L);
        curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 1L);
        curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 2L);
        curl_easy_setopt(curl, CURLOPT_VERBOSE, 1L);

        file_debug_log("%s: Performing CURL request", LOG_PREFIX);
        res = curl_easy_perform(curl);
        curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);

        file_debug_log("%s: CURL request completed. Response code: %ld", LOG_PREFIX, http_code);

        if (res == CURLE_OK) {
            file_debug_log("%s: CURL request successful", LOG_PREFIX);
            if (resp.data) {
                file_debug_log("%s: Received response data: %s", LOG_PREFIX, resp.data);
            }
            
            if (http_code == 200 && resp.data && strstr(resp.data, "\"status\":\"SUCCESS\"")) {
                auth_success = 1;
                file_debug_log("%s: Authentication successful", LOG_PREFIX);
            } else {
                file_debug_log("%s: Authentication failed - HTTP code: %ld", LOG_PREFIX, http_code);
                if (resp.data) {
                    file_debug_log("%s: Error response: %s", LOG_PREFIX, resp.data);
                }
            }
        } else {
            file_debug_log("%s: CURL request failed: %s", LOG_PREFIX, curl_easy_strerror(res));
        }

        curl_slist_free_all(headers);
        curl_easy_cleanup(curl);
    }

    // Cleanup
    if (payload) {
        memset(payload, 0, strlen(payload));
        free(payload);
    }
    if (resp.data) {
        free(resp.data);
    }

    return auth_success;
}
```

Key changes:
1. Added proper JSON escaping for username and password
2. Updated JSON payload format to match Okta API requirements
3. Added additional required headers
4. Added proper SSL verification options
5. Added User-Agent header
6. Added additional JSON fields required by Okta API
7. Improved error handling and cleanup

The rest of the code remains the same. The main changes are:
1. Username and password are now properly escaped
2. JSON payload is properly formatted according to Okta API specs
3. Added required JSON fields like options
4. Added proper headers

Try rebuilding with this updated function and test again. The logs should now show a properly formatted request and hopefully a successful response from the Okta API.

Remember to update your config file with the correct Okta domain:
```ini
api_url=https://your-company.okta.com/api/v1/authn
debug=1
```

You should see better-formatted requests in the log file now. Let me know if you still see any issues!​​​​​​​​​​​​​​​​
